// Mixin to create a declaration whose value is a rem unit. Also provide pixel fallback.
//
// .simple-uabraham {
//   @include rem(padding, 10px);
// }
@mixin rem($property, $value) {
    @if not $supports-rem {
        #{$property}: $value;
    }
    #{$property}: $value / $base-font-size * 1rem;
}

// Generate `:hover` and `:focus` styles in one go.
@mixin hocus() {
    &:hover,
    &:focus {
        @content;
    }
}
$supports-rem: false;

// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
// .foo {
//     @include font-size(10px);
// }
@mixin font-size($font-size, $line-height: auto) {
    @if not $supports-rem {
        font-size: $font-size;
    }
    font-size: ($font-size / $base-font-size) * 1rem;

    @if $line-height == auto {
        line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }

    @else {
        @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
            line-height: $line-height;
        }

        @elseif ($line-height != none and $line-height != false) {
            @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`."
        }
    }
}

@mixin font-size-sm {
    @include font-size($base-font-size - 2);
}

@mixin font-size-md {
    @include font-size($base-font-size);
}

@mixin font-size-lg {
    @include font-size($base-font-size + 2);
}

@mixin font-size-xl {
    @include font-size($heading-size-1);
}

// Simple truncation mixin to cut off text using an ellipsis after a certain
// width.
//
// .simple-usage {
//   @include truncate();
// }
//
// .detailed-usage {
//   @include truncate(<value>);
// }
@mixin truncate($limit: 100%) {
    max-width: $limit;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Clearfix
@mixin clearfix {
    &:before,
    &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}

@mixin bg-text($bg-color) {
    background-color: $bg-color;
    color: set-text-color($bg-color);
}


// Shadows
// Focus shadow mixin.
@mixin focus-shadow() {
    box-shadow: 0 0 8px rgba(0,0,0,.18),0 8px 16px rgba(0,0,0,.36);
}

@mixin shadow-2dp() {
    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0 3px 1px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0 1px 5px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity);
}

@mixin shadow-3dp() {
    box-shadow: 0 3px 4px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0 3px 3px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0 1px 8px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity);
}

@mixin shadow-4dp() {
    box-shadow: 0 4px 5px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0 1px 10px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity), 0 2px 4px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}

@mixin shadow-6dp() {
    box-shadow: 0 6px 10px 0 rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0 1px 18px 0 rgba(0, 0, 0, $shadow-ambient-shadow-opacity), 0 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}

@mixin shadow-8dp() {
    box-shadow: 0 8px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0 3px 14px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity), 0 5px 5px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}

@mixin shadow-16dp() {
    box-shadow: 0 16px 24px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0 6px 30px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity), 0 8px 10px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity);
}

// Animations
@mixin material-animation-fast-out-slow-in($duration:0.2s) {
    transition-duration: $duration;
    transition-timing-function: $animation-curve-fast-out-slow-in;
}

@mixin material-animation-linear-out-slow-in($duration:0.2s) {
    transition-duration: $duration;
    transition-timing-function: $animation-curve-linear-out-slow-in;
}

@mixin material-animation-fast-out-linear-in($duration:0.2s) {
    transition-duration: $duration;
    transition-timing-function: $animation-curve-fast-out-linear-in;
}

@mixin material-animation-default($duration:0.2s) {
    transition-duration: $duration;
    transition-timing-function: $animation-curve-default;
}
