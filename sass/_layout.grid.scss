/*------------------------------------*\
	#GRIDS
\*------------------------------------*/

/**
 * All content must be contained within child `grid-item` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 3. Ensure consistent default alignment.
 */

.grid {
  display: block; /* 1 */
  font-size: 0; /* 2 */
  margin: 0; /* 1 */
  padding: 0; /* 1 */
  text-align: left; /* 3 */
  width: 100%;

  > * {
    @include font-size($base-font-size);
  }
}

/**
 * Modifier: center align all grid items
 */

.grid--center {
  text-align: center;
}

/**
 * Modifier: right align all grid items
 */

.grid--right {
  text-align: right;
}

/**
 * Modifier: middle-align grid items
 */

.grid--middle > .grid-item {
  vertical-align: middle;
}

/**
 * Modifier: bottom-align grid items
 */

.grid--bottom > .grid-item {
  vertical-align: bottom;
}

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
.grid--rev {
    direction:rtl;
    text-align:left;

    > .grid-item {
        direction:ltr;
        text-align:left;
    }
}

/**
 * Modifier: gutters
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

.grid--with-gutter {
  margin: 0 -$base-spacing-unit-sm;

    > .grid-item {
        padding: 0 $base-spacing-unit-sm;
    }
}




/*------------------------------------*\
	##Grid-items
\*------------------------------------*/

/**
 * No explicit width by default. Rely on combining `grid-item` with a dimension
 * utility or a component class that extends 'grid'.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. IE < 8: fake inline-block
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Controls vertical positioning of units.
 * 5. Make cells full-width by default.
 */

.grid-item {
  box-sizing: border-box;
  display: inline-block; /* 1 */
  *display: inline; /* 2 */
  margin: 0;
  padding: 0;
  text-align: left; /* 3 */
  vertical-align: top; /* 4 */
  width: 100%; /* 5 */
  @include font-size($base-font-size);
}

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */

.grid-item--center {
  display: block;
  margin: 0 auto;
}
